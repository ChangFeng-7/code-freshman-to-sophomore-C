//任务描述
//        在一个正方形的灰度图片上，肿瘤是一块矩形的区域，肿瘤的边缘所在的像素点在图片中用0表示。其它肿瘤内和肿瘤外的点都用255表示。现在要求你编写一个程序，计算肿瘤内部的像素点的个数（不包括肿瘤边缘上的点）。已知肿瘤的边缘平行于图像的边缘。
//
//输入格式:
//只有一个测试样例。第一行有一个整数n，表示正方形图像的边长。其后n行每行有n个整数，取值为0或255。整数之间用一个空格隔开。已知n不大于1000。
//
//输出格式:
//输出一行，该行包含一个整数，为要求的肿瘤内的像素点的个数。
//#include <stdio.h>
//int main(){
//    int n,i,j,sum;
//    scanf("%d",&n);
//    int a[n][n];
//    for(i=0,j=0;i!=n;i++){
//        for(j=0;j!=n;j++){
//            scanf("%d",&a[i][j]);//这个思路不知道第一个得分点拿不到，所以按照别的思路再写一个。（知道了，是一圈零作为肿瘤边界计算面积时也要计算在内）
//        }
//    }
//    for(i=1;i!=n-1;i++){
//        for(j=1;j!=n-1;j++){
//            if(a[i][j]==255)
//                sum++;
//        }
//    }
//    printf("%d",sum);
//    return 0;
//}    以下为第二个思路：
#include <stdio.h>//满分思路，碰见个零就开始检测，同时检测被检测的元素下一个是不是零，是的话就停止检测，进行下一行。
//肿瘤面积
int main(){
    int n,i,j,sum=0;
    scanf("%d",&n);
    int a[n][n];
    for(i=0,j=0;i!=n;i++){
        for(j=0;j!=n;j++){
            scanf("%d",&a[i][j]);
        }
    }
    for(i=0,j=0;i!=n;i++){
        for(j=0;j!=n;j++) {
            if (a[i][j] == 0) {
                goto one;
                two:break;
            }
        }
    }
    printf("%d",sum);
    return 0;
    one:
    for(;j!=n;j++){
        if(a[i][j]==255)
            sum++;
        if(a[i][j+1]==0)
            break;
    }
    goto two;
}